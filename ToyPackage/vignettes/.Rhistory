?cluster
library(knitr)
library(readxl)
library(tidyverse)
library(kableExtra)
library(survival)
library(survminer)
library(lme4)
?cluster
fixmodel_cal_cont <- function(data, arm, alpha=0.025, unit_size=25){
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear model
if(max_unit==1){ # if only one calendar time unit in the data, don't use unit as covariate
mod <- lm(response ~ as.factor(treatment), data_new)
} else {
mod <- lm(response ~ as.factor(treatment) + as.factor(cal_time), data_new)
}
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
# metrics
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
lower_ci <- confint(mod)[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod)[paste0("as.factor(treatment)", arm), 2]
reject_h0 <- (p_val < alpha)
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = lower_ci,
upper_ci = upper_ci,
reject_h0 = reject_h0))
}
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
library(NCC)
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
trial_data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
fixmodel_cal_cont(data = trial_data, arm = 3)
data <- datasim_cont(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
theta = rep(0.25, 3), lambda = rep(0.15, 4), sigma = 1, trend = "linear")
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
unit_size=25
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
View(data)
mod <- lm(response ~ as.factor(treatment) + as.factor(cal_time), data_new)
arm = 3
data_new <- data[data$cal_time %in% c(1:max_unit),]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
mod <- lm(response ~ as.factor(treatment) + as.factor(cal_time), data_new)
mod
summary(mod)
fixmodel_cal_cont(data = trial_data, arm = 3)
fixmodel_cal_cont(data = data, arm = 3)
all.equal(data, data_new)
fixmodel_cal_cont(data = data_new, arm = 3)
pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
res <- summary(mod)
pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
res
0.0111/2
fixmodel_cal_cont(data = data_new, arm = 3)
fixmodel_cal_cont(data = data, arm = 2)
arm=2
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
View(data_new)
mod <- lm(response ~ as.factor(treatment) + as.factor(cal_time), data_new)
res <- summary(mod)
res
pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], mod$df, lower.tail = FALSE)
mixmodel_cont <- function(data, arm, alpha=0.025, ci=FALSE, unit_size=25){
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear model
mod <- lmer(response ~ as.factor(treatment) + (1 | cal_time), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
# confidence intervals
if (ci) {
lower_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
}
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = ifelse(exists("lower_ci"), lower_ci, "not computed"),
upper_ci = ifelse(exists("upper_ci"), upper_ci, "not computed"),
reject_h0 = reject_h0))
}
mixmodel_cal_cont(data = trial_data, arm = 3)
mixmodel_cal_cont <- function(data, arm, alpha=0.025, ci=FALSE, unit_size=25){
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear model
mod <- lmer(response ~ as.factor(treatment) + (1 | cal_time), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
# confidence intervals
if (ci) {
lower_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
}
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = ifelse(exists("lower_ci"), lower_ci, "not computed"),
upper_ci = ifelse(exists("upper_ci"), upper_ci, "not computed"),
reject_h0 = reject_h0))
}
mixmodel_cal_cont(data = trial_data, arm = 3)
arm = 3
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear model
mod <- lmer(response ~ as.factor(treatment) + (1 | cal_time), data_new) # using lmerTest
mod
res <- summary(mod)
res
pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
coef(res)
coef(res)[paste0("as.factor(treatment)", arm), "t value"]
coef(res)[paste0("as.factor(treatment)", arm), "df"]
library(lmerTest)
mixmodel_cal_cont <- function(data, arm, alpha=0.025, ci=FALSE, unit_size=25){
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit linear model
mod <- lmer(response ~ as.factor(treatment) + (1 | cal_time), data_new) # using lmerTest
res <- summary(mod)
# one-sided p-value
p_val <- pt(coef(res)[paste0("as.factor(treatment)", arm), "t value"], coef(res)[paste0("as.factor(treatment)", arm), "df"], lower.tail = FALSE)
# treatment effect
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
reject_h0 <- (p_val < alpha)
# confidence intervals
if (ci) {
lower_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 1]
upper_ci <- confint(mod, parallel="no")[paste0("as.factor(treatment)", arm), 2]
}
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = ifelse(exists("lower_ci"), lower_ci, "not computed"),
upper_ci = ifelse(exists("upper_ci"), upper_ci, "not computed"),
reject_h0 = reject_h0))
}
mixmodel_cal_cont(data = trial_data, arm = 3)
mixmodel_cal_cont(data = trial_data, arm = 3, ci=T)
fixmodel_cal_bin <- function(data, arm, alpha=0.025, unit_size=25){
data$cal_time <- rep(c(1:ceiling((nrow(data)/unit_size))), each=unit_size)[1:nrow(data)]
max_unit <- max(data[data$treatment==arm,]$cal_time)
data_new <- data[data$cal_time %in% c(1:max_unit),]
# fit logistic model
if(max_unit==1){ # if only one calendar time unit in the data, don't use calendar time unit as covariate
mod <- glm(response ~ as.factor(treatment), data_new, family = "binomial")
} else {
mod <- glm(response ~ as.factor(treatment) + as.factor(cal_time), data_new, family = "binomial")
}
res <- summary(mod)
# one-sided p-value
p_val <- pnorm(coef(res)[paste0("as.factor(treatment)", arm), "z value"], lower.tail = FALSE)
# metrics
treat_effect <- res$coefficients[paste0("as.factor(treatment)", arm), "Estimate"]
lower_ci <- suppressMessages(confint(mod)[paste0("as.factor(treatment)", arm), 1])
upper_ci <- suppressMessages(confint(mod)[paste0("as.factor(treatment)", arm), 2])
reject_h0 <- (p_val < alpha)
return(list(p_val = p_val,
treat_effect = treat_effect,
lower_ci = lower_ci,
upper_ci = upper_ci,
reject_h0 = reject_h0))
}
trial_data <- datasim_bin(num_arms = 3, n_arm = 100, d = c(0, 100, 250),
p0 = 0.7, OR = rep(1.8, 3), lambda = rep(0.15, 4), trend="stepwise")
fixmodel_cal_bin(data = trial_data, arm = 3)
